// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: connector.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Grpc {
  public static partial class Connector
  {
    static readonly string __ServiceName = "grpc.Connector";

    static readonly grpc::Marshaller<global::Grpc.TriggersRequest> __Marshaller_grpc_TriggersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.TriggersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpc.TriggersResponse> __Marshaller_grpc_TriggersResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.TriggersResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpc.TriggerRequest> __Marshaller_grpc_TriggerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.TriggerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpc.TriggerResponse> __Marshaller_grpc_TriggerResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.TriggerResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpc.ActionsRequest> __Marshaller_grpc_ActionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.ActionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpc.ActionsResponse> __Marshaller_grpc_ActionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.ActionsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpc.ActionRequest> __Marshaller_grpc_ActionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.ActionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpc.ActionResponse> __Marshaller_grpc_ActionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.ActionResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Grpc.TriggersRequest, global::Grpc.TriggersResponse> __Method_triggers = new grpc::Method<global::Grpc.TriggersRequest, global::Grpc.TriggersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "triggers",
        __Marshaller_grpc_TriggersRequest,
        __Marshaller_grpc_TriggersResponse);

    static readonly grpc::Method<global::Grpc.TriggerRequest, global::Grpc.TriggerResponse> __Method_perform_trigger = new grpc::Method<global::Grpc.TriggerRequest, global::Grpc.TriggerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "perform_trigger",
        __Marshaller_grpc_TriggerRequest,
        __Marshaller_grpc_TriggerResponse);

    static readonly grpc::Method<global::Grpc.ActionsRequest, global::Grpc.ActionsResponse> __Method_actions = new grpc::Method<global::Grpc.ActionsRequest, global::Grpc.ActionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "actions",
        __Marshaller_grpc_ActionsRequest,
        __Marshaller_grpc_ActionsResponse);

    static readonly grpc::Method<global::Grpc.ActionRequest, global::Grpc.ActionResponse> __Method_perform_action = new grpc::Method<global::Grpc.ActionRequest, global::Grpc.ActionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "perform_action",
        __Marshaller_grpc_ActionRequest,
        __Marshaller_grpc_ActionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Grpc.ConnectorReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Connector</summary>
    [grpc::BindServiceMethod(typeof(Connector), "BindService")]
    public abstract partial class ConnectorBase
    {
      /// <summary>
      /// used by Workflows to get triggers defined by the Connector. Run when a user registers or refreshes a Connector.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpc.TriggersResponse> triggers(global::Grpc.TriggersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// used by Workflows to check for trigger events. Polled periodically.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpc.TriggerResponse> perform_trigger(global::Grpc.TriggerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// used by Workflows to get get actions defined by the Connector. Run when a user registers or refreshes a Connector.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpc.ActionsResponse> actions(global::Grpc.ActionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// used by Workflows to perform an action defined by the Connector. Run when a Workflow containing the defined action is run.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpc.ActionResponse> perform_action(global::Grpc.ActionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ConnectorBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_triggers, serviceImpl.triggers)
          .AddMethod(__Method_perform_trigger, serviceImpl.perform_trigger)
          .AddMethod(__Method_actions, serviceImpl.actions)
          .AddMethod(__Method_perform_action, serviceImpl.perform_action).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ConnectorBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_triggers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grpc.TriggersRequest, global::Grpc.TriggersResponse>(serviceImpl.triggers));
      serviceBinder.AddMethod(__Method_perform_trigger, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grpc.TriggerRequest, global::Grpc.TriggerResponse>(serviceImpl.perform_trigger));
      serviceBinder.AddMethod(__Method_actions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grpc.ActionsRequest, global::Grpc.ActionsResponse>(serviceImpl.actions));
      serviceBinder.AddMethod(__Method_perform_action, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grpc.ActionRequest, global::Grpc.ActionResponse>(serviceImpl.perform_action));
    }

  }
}
#endregion
